<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>NextRoomInit=0
ExecuteShellOpenwindow()
randomize()
draw_set_font(ft_number)
global.PlayerOnlineName=choose(
    "A player's Name :&gt;",
    "Player 1",
    "Player 2",
    "Player 3",
    "2",
    "500",
    "No ping",
    "Namesr",
)
global.IsSpeedrun=true
scr_units_init()
global.IsFullScreen=false
global.PlayerDeck=ds_list_create()
IsTempDeckEditor=false
scrollbarY=0
scrolamt=0
ScrollbarUIAmt=0
IsScrollbarPress=false
if global.IsSpeedrun{
repeat(20){
    ds_list_add(global.PlayerDeck,irandom_range(1,UnitID.UnitID_MAX-1))
    //ds_list_add(global.PlayerDeck,UnitID.PlantVsZombies_Imitator)
    //ds_list_add(global.PlayerDeck,irandom_range(UnitID.Unturned_AcidZombie,UnitID.UnitID_MAX-1))
}
}
if !global.IsSpeedrun{
    //reading Deck file
    var _dir=working_directory+"DeckList.txt"
    if file_exists(_dir){
        //converting string
        var buffer=buffer_load(_dir)
        var _string=buffer_read(buffer,buffer_string)
        buffer_delete(buffer)
        //reading
        _m=json_decode(_string)
        _l=_m[? "DeckList"]
        ds_list_copy(global.PlayerDeck,_l)
        ds_map_destroy(_m)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord("S")){
    //server
    NextRoomInit=obj_server
    room_goto(rm_online)
}
if keyboard_check_pressed(ord("C")){
    //Connect to server as client
    NextRoomInit=obj_client
    room_goto(rm_online)
}
if keyboard_check_pressed(ord("D")){
    //Open temp deck editor
    IsTempDeckEditor=!IsTempDeckEditor
    //save deck
    if !IsTempDeckEditor{
        //getting string to write
        var _m=ds_map_create();
        var _l=ds_list_create();ds_list_copy(_l,global.PlayerDeck);
        ds_map_add_list(_m,"DeckList",_l)
        var _string=json_encode_destroy(_m)
        _string=json_beautify(_string)
        //writing into file
        var _dir=working_directory+"DeckList.txt"
        file = file_text_open_write(_dir);
        file_text_write_string(file,_string);
        file_text_close(file);
    }
}
if keyboard_check_pressed(vk_f1){
    //open new window
    ExecuteShellOpenwindow()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if NextRoomInit!=0{
    var _o=instance_create(0,0,NextRoomInit)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scalling
//need add some kind of scalling feature
if keyboard_check_pressed(ord("Z")){
switch(global.IsFullScreen){
    case false://becoming fullscreen
        screen_width = display_get_width();
        screen_height = display_get_height();
        surface_resize(application_surface, screen_width, screen_height)
        display_set_gui_size(screen_width, screen_height)
        window_set_size(screen_width, screen_height);
        window_set_fullscreen(true);
        global.IsFullScreen=true
    break;
    case true://exiting form fullscreen
        screen_width = 1920;
        screen_height = 1080;
        surface_resize(application_surface, screen_width, screen_height)
        display_set_gui_size(screen_width, screen_height)
        window_set_size(screen_width, screen_height);
        window_set_fullscreen(false);
        global.IsFullScreen=false
    break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deck editor
var len=9
var _ylevel=0
var _xlevel=0
var _ygap=270
if IsTempDeckEditor{
    //draw background
    draw_set_alpha(0.2)
    draw_set_color(c_black)
    draw_rectangle(0,0,view_wport[0],view_hport[0],false)
    draw_set_alpha(1)
    draw_set_color(c_white)

    var _curWorld=WorldType.Destiny2
    for(var i=1;i&lt;(UnitID.UnitID_MAX);i++){
        var _StartOfNewWorld=false
        if global.UnitDat_WorldType[i]!=_curWorld{
            _ylevel+=1.2
            _xlevel=0
            _curWorld=global.UnitDat_WorldType[i]
            _StartOfNewWorld=true
        }
        var IsSelected=false
        var IsFull=false
        var _sp=global.UnitDat_Sprite[i]
        var _im=global.UnitDat_Image[i]
        if ds_list_size(global.PlayerDeck)&gt;=20{
            IsFull=true
        }
        if ds_list_find_index(global.PlayerDeck,i)!=-1{
            IsSelected=true
        }
        
        var _x=(view_wview[0]/(len+1))*(_xlevel+1);
        var _y=150+_ygap*_ylevel+scrollbarY*100;
        _xlevel++
        var _sc=0.2;
        var _oc=1;if IsSelected{_oc=0.2}
        if !IsFull{
            draw_sprite_ext(_sp,_im,_x,_y,_sc,_sc,0,c_white,_oc)
        }else{
            draw_sprite_ext(_sp,_im,_x,_y,_sc,_sc,0,c_gray,_oc)
        }
        //drawing world type above
        if _StartOfNewWorld{
            draw_set_valign(fa_bottom)
            draw_set_color(c_black)
            draw_text(_x-sprite_get_width(_sp)*_sc/2,_y-sprite_get_height(_sp)*_sc/2,global.WorldTypeName[_curWorld])
            draw_set_valign(fa_top)
            draw_set_color(c_white)
        }
        
        //moving to a next line
        if _xlevel=len{
            _ylevel++
            _xlevel=0
        }
        
        //selection/deselection
        var msx=device_mouse_x_to_gui(0)
        var msy=device_mouse_y_to_gui(0)
        
        if mouse_check_button_pressed(mb_left){
        if point_in_rectangle(msx,msy,
            _x-sprite_get_width(_sp)/2*_sc,
            _y-sprite_get_height(_sp)/2*_sc,
            _x+sprite_get_width(_sp)/2*_sc,
            _y+sprite_get_height(_sp)/2*_sc,
        ){
            if !IsSelected &amp;&amp; !IsFull{
                ds_list_add(global.PlayerDeck,i)
            }else{
                ds_list_delete(global.PlayerDeck,ds_list_find_index(global.PlayerDeck,i))
            }
        }
        }
    }
    //drawing scrollbar
    var _ratio=abs((scrolamt*100)/(_ylevel*_ygap))
    var ScrollbarUI_he=100
    var ScrollbarUI_x1=view_wport[0]-30
    var ScrollbarUI_x2=view_wport[0]
    var ScrollbarUI_y1=_ratio*(view_hport[0]-ScrollbarUI_he)+0
    var ScrollbarUI_y2=_ratio*(view_hport[0]-ScrollbarUI_he)+ScrollbarUI_he
    draw_set_alpha(0.2)
    draw_set_color(c_black)
    draw_rectangle(ScrollbarUI_x1,0,ScrollbarUI_x2,view_hport[0],false)
    draw_rectangle(ScrollbarUI_x1,ScrollbarUI_y1,ScrollbarUI_x2,ScrollbarUI_y2,false)
    draw_set_alpha(1)
    draw_set_color(c_white)
    var msx=device_mouse_x_to_gui(0)
    var msy=device_mouse_y_to_gui(0)
    if point_in_rectangle(msx,msy,ScrollbarUI_x1,ScrollbarUI_y1,ScrollbarUI_x2,ScrollbarUI_y2){
    if !IsScrollbarPress{
        if mouse_check_button_pressed(mb_left){
            IsScrollbarPress=true
        }
    }
    }
    if IsScrollbarPress{
        if mouse_check_button_released(mb_left){
            IsScrollbarPress=false
        }
    }
    if IsScrollbarPress{
        scrolamt=-((device_mouse_y_to_gui(0)/view_hport[0])*(_ylevel*_ygap))/100
    }
    
    //drawing header
    draw_set_halign(fa_center)
    draw_set_color(c_black)
    draw_text(view_wport[0]/2,10,string(ds_list_size(global.PlayerDeck))+"/20 Cards")
    draw_set_halign(fa_left)
    draw_set_color(c_white)
    //scrolling
    var amt=5
    scrollbarY=lerp(scrollbarY,scrolamt,0.6)
    if mouse_wheel_down(){
        //if scrolamt&gt;(-(((UnitID.UnitID_MAX) div len)*(_ygap/100)))
        if scrolamt*100&gt;=-_ylevel*_ygap
        {
            scrolamt--
        }
    }
    if mouse_wheel_up(){
        if scrolamt&lt;0{
            scrolamt++
        }
    }
    scrolamt=clamp(scrolamt,-_ylevel*_ygap,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_number)
draw_text_transformed(0,0,"Elite Card Wars Demo",5,5,0)
draw_text_transformed(0,120,"Press 's' to create server",3,3,0)
draw_text_transformed(0,200,"Press 'c' to connect server",3,3,0)
draw_text_transformed(0,280,"Press 'd' to edit your local deck",3,3,0)
draw_text_transformed(0,360,"Press 'z' to fullscreen",3,3,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
