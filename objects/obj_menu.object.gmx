<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>NextRoomInit=0
ExecuteShellOpenwindow()
randomize()
draw_set_font(ft_number)
global.PlayerOnlineName=choose(
    "A player's Name :&gt;",
    "Player 1",
    "Player 2",
    "Player 3",
    "2",
    "500",
    "No ping",
    "Namesr",
)
//settings
global.IsSpeedrun=false
global.Version="0.0.1"
global.IsFullScreen=false
scr_units_init()
//Player data
global.PlayerDeck=ds_list_create()
global.PlayerHero=1
//Deck editor variables
DeckEditorPage=noone
DeckEditorScrollAmt[0]=0;DeckEditorScrollAmt[1]=0;

//initializing deck
if global.IsSpeedrun{
repeat(20){
    ds_list_add(global.PlayerDeck,irandom_range(1,UnitID.UnitID_MAX-1))
    //ds_list_add(global.PlayerDeck,UnitID.PlantVsZombies_Imitator)
    //ds_list_add(global.PlayerDeck,irandom_range(UnitID.Unturned_AcidZombie,UnitID.UnitID_MAX-1))
}
}
if !global.IsSpeedrun{
    //reading Deck file
    var _dir=working_directory+"DeckList.txt"
    if file_exists(_dir){
        //converting string
        var buffer=buffer_load(_dir)
        var _string=buffer_read(buffer,buffer_string)
        buffer_delete(buffer)
        //correct file?
        _m=json_decode(_string)
        
        //reading Decklist
        _h=_m[? "Hero"]
        global.PlayerHero=_h
        //reading Decklist
        _l=_m[? "DeckList"]
        if !is_undefined(_l){ds_list_copy(global.PlayerDeck,_l)}
        //reading SpellList
        //_l=_m[? "SpellList"]
        //if !is_undefined(_l){ds_list_copy(global.PlayerDeck,_l)}
            
        ds_map_destroy(_m)
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord("S")){
    //server
    NextRoomInit=obj_server
    room_goto(rm_online)
}
if keyboard_check_pressed(ord("C")){
    //Connect to server as client
    NextRoomInit=obj_client
    room_goto(rm_online)
}
if keyboard_check_pressed(vk_f1){
    //open new window
    ExecuteShellOpenwindow()
}

if keyboard_check_pressed(ord("D")){
    if !instance_exists(DeckEditorPage){
        DeckEditorPage=instance_create(0,0,obj_menu_DeckSelector)
        DeckEditorPage.Menu=id
        DeckEditorPage.scrolamt=DeckEditorScrollAmt[0]
    }else{
        DeckEditorPage.Exit=true
        scr_menu_update_deckfile()
    }
}
if keyboard_check_pressed(ord("F")){
    if !instance_exists(DeckEditorPage){
        DeckEditorPage=instance_create(0,0,obj_menu_HeroSelector)
        DeckEditorPage.Menu=id
        DeckEditorPage.scrolamt=DeckEditorScrollAmt[1]
    }else{
        DeckEditorPage.Exit=true
        scr_menu_update_deckfile()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if NextRoomInit!=0{
    var _o=instance_create(0,0,NextRoomInit)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scalling
//need add some kind of scalling feature
if keyboard_check_pressed(ord("Z")){
switch(global.IsFullScreen){
    case false://becoming fullscreen
        screen_width = display_get_width();
        screen_height = display_get_height();
        surface_resize(application_surface, screen_width, screen_height)
        display_set_gui_size(screen_width, screen_height)
        window_set_size(screen_width, screen_height);
        window_set_fullscreen(true);
        global.IsFullScreen=true
    break;
    case true://exiting form fullscreen
        screen_width = 1920;
        screen_height = 1080;
        surface_resize(application_surface, screen_width, screen_height)
        display_set_gui_size(screen_width, screen_height)
        window_set_size(screen_width, screen_height);
        window_set_fullscreen(false);
        global.IsFullScreen=false
    break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///empty
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_number)
draw_text_transformed(0,0,"Elite Card Wars Demo",5,5,0)
draw_text_transformed(0,120,"Press 's' to create server",3,3,0)
draw_text_transformed(0,200,"Press 'c' to connect server",3,3,0)
draw_text_transformed(0,280,"Press 'D,F' to edit deck",3,3,0)
draw_text_transformed(0,360,"Press 'z' to fullscreen",3,3,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
