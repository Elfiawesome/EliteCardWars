<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game variables
inherit_svrclt_create()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_init_network()


global.NetworkObj=id
//create client socket
var type=network_socket_tcp
var port=3115
var socket=network_create_socket(type)
client=network_connect(socket,"127.0.0.1",port)
if client&lt;0{
    show_message("Failed to connect")
}

//my player object is only created when I receive PLAYERINIT from the server
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive Packets
var type = async_load[? "type"]
switch(type){
    case network_type_data:
        //receive packet
        var socket=async_load[? "id"]
        var buffer=async_load[? "buffer"]
        buffer_seek(buffer,buffer_seek_start,0)
        scr_clt_rp(buffer)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
if keyboard_check_pressed(ord("P")){IsDebug=!IsDebug}

if !IsDebug{exit;}
draw_text(0,0,mysocket)
draw_text(0,30,"Animator Count: "+string(instance_number(obj_animator)))
for(var i=0;i&lt;ds_list_size(socketlist);i++){
    draw_text(0,60+(i*20),string(socketlist[| i])+": "+string(socket_to_instanceid[? socketlist[| i]].name))
    draw_text(180,60+(i*20),"Ping: "+string(socket_to_instanceid[? socketlist[| i]].Ping))
}

if global.GameStage=GAMESTAGE.PLAYERTURNS{
_t="Prepping Turn"
}else{
_t="Attacking Turn"
}
draw_text(0,90+(i*20),"GAMESTAGE "+string(_t))

if Turn&gt;=0{
    draw_text(view_wport[0]/2,100,"Turn: "+string(Turnstage[Turn]))
    draw_text(view_wport[0]/2,130,string(mysocket))
}else{
    draw_text(view_wport[0]/2,100,string(ds_list_size(ReadySocket))+"/"+string(array_length_1d(Turnstage))+" is ready")
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
