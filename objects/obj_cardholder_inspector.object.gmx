<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_rectx[0]=view_wport[0];_recty[0]=0;
_rectx[1]=view_wport[0];_recty[1]=0;
_rectx[2]=view_wport[0];_recty[2]=0;
_rectx[3]=view_wport[0];_recty[3]=0;

AnimationStage=0
Cardholder=undefined
Width=view_wport[0]/5*3
Timer=0

//scrolling
scrolamt=0
scrollbarY=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ControlParent.GUIObjectOrder[| 0]=id{
switch(AnimationStage){
    case 0://wait
        Timer++
        if Timer&gt;2{
            AnimationStage=1
            Timer=0
        }
    break;
    case 1://introduction
        _rectx[0]=lerp(_rectx[0],view_wport[0]-Width+0,0.07)
        _rectx[1]=lerp(_rectx[1],view_wport[0]-Width+100,0.07)
        _rectx[2]=lerp(_rectx[2],view_wport[0]-Width+200,0.07)
        _rectx[3]=lerp(_rectx[3],view_wport[0]-Width+300,0.07)
    break;
}
//scrolling
var amt=5
scrollbarY=lerp(scrollbarY,scrolamt*100,0.6)
if mouse_wheel_down(){
    if scrolamt&lt;300{
        scrolamt++
    }
}
if mouse_wheel_up(){
    if scrolamt&gt;0{
        scrolamt--
    }
}


//exiting button
if AnimationStage!=0{
if keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right) || mouse_check_button_pressed(mb_left) || is_undefined(Cardholder){
    ds_list_delete(ControlParent.GUIObjectOrder,0)
    AnimationStage=10
}
}


}


switch(AnimationStage){
    case 10://exit
        _rectx[0]=lerp(_rectx[0],view_wport[0],0.07)
        _rectx[1]=lerp(_rectx[1],view_wport[0],0.07)
        _rectx[2]=lerp(_rectx[2],view_wport[0],0.07)
        _rectx[3]=lerp(_rectx[3],view_wport[0],0.07)
        if abs(_rectx[0]-view_wport[0])&lt;0.1{
            instance_destroy()
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ControlParent.GUIObjectOrder[| 0]=id{

for(var i=0;i&lt;array_length_1d(_rectx);i++){
draw_primitive_begin(pr_trianglefan)

draw_set_color(c_white)
draw_set_alpha(0.2)

draw_vertex(_rectx[i],_recty[i])
draw_vertex(_rectx[i]+Width/10,_recty[i]+view_hport[0])
draw_vertex(_rectx[i]+Width,_recty[i]+view_hport[0])
draw_vertex(_rectx[i]+Width,_recty[i])

draw_primitive_end()
}

draw_set_alpha(1)

if !is_undefined(Cardholder){
    var _x=_rectx[0]+Width/2
    var _y=_recty[0]-scrollbarY
    var _id=Cardholder.CardID
    var _Stats=Cardholder.Stats
    var _sprite=global.UnitDat_Sprite[_id]
    var _image=global.UnitDat_Image[_id]
    var _sc=0.6
    var _w=sprite_get_width(_sprite)*_sc
    var _h=sprite_get_height(_sprite)*_sc
    var _b=30
    draw_sprite_ext(_sprite,_image,
        _x,
        _y+_h/2+_b,
        _sc,_sc,0,c_white,1)
    var _wordx=_x-_w/2
    var _wordy=_y+_h+_b+_b
    
    draw_set_color(c_black)
    draw_set_font(ft_Ebrima_s12)
    var _t="Hp: "+string(_Stats[? "Finalized_Hp"])+"/"+string(_Stats[? "Base_Hp"])
    draw_text(_wordx,_wordy,_t);_wordy+=string_height(_t)
    var _t="Atk: "+string(_Stats[? "Finalized_Atk"])+"/"+string(_Stats[? "Base_Atk"])
    draw_text(_wordx,_wordy,_t);_wordy+=string_height(_t)
    
    var _t="Special Attacks: "
    var _txoff=30
    var _hassp=false
    draw_text(_wordx,_wordy,_t);_wordy+=string_height(_t)
    if _Stats[? "CrossAtk"]{
        var _t="Cross Attack";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "Pierce_Atk"]{
        var _t="Pierce Attack";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "Sweep_Atk"]{
        var _t="Sweep Attack";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "SpreadAtk"]{
        var _t="Spread Attack";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _hassp=false{
        var _t="None...";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    
    //StatusEffects
    var _t="Status Effects: "
    var _txoff=30
    var _hassp=false
    draw_text(_wordx,_wordy,_t);_wordy+=string_height(_t)
    if _Stats[? "IsImmune"]{
        var _t="Immunity";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "IsSPImmune"]{
        var _t="SP Immunity";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "IsBAImmune"]{
        var _t="BA Immunity";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "IsStatusEffectImmune"]{
        var _t="Status Effect Immunity";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _Stats[? "IsSpellsImmune"]{
        var _t="Spells Immunity";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    if _hassp=false{
        var _t="None...";draw_text(_wordx+_txoff,_wordy,_t);_wordy+=string_height(_t);_hassp=true
    }
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
