<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//networking
mysocket=-1

//variables
CardID=0
IsEnemy=false
Pos=0
IsSelected=false
IsSelected_Ability=false
ShakeAmt=0
Shakex=x
Shakey=y
Stats=ds_map_create()
Stats[? "Base_Hp"]=0
Stats[? "Hp"]=0
Stats[? "Base_Atk"]=0
Stats[? "Atk"]=0
Stats[? "Pt"]=0
Stats[? "AtkAlrdy"]=false
Stats[? "AbilityAlrdy"]=false
//attack types
Stats[? "CrossAtk"]=false
Stats[? "SpreadAtk"]=false
Stats[? "Sweep_Atk"]=false
Stats[? "Pierce_Atk"]=false
Stats[? "Sp_Atk"]=false
//Character states
Stats[? "IsFrozen"]=0
Stats[? "IsImmune"]=0
Stats[? "IsSPImmune"]=0
Stats[? "IsBAImmune"]=0

//Hidden stats
Stats[? "IsAbilityStun"]=false
Stats[? "AbilityLifespan"]=0
Stats[? "AbilityCooldown"]=0//how many rounds till ability can be used again
Stats[? "AbilityCooldownMax"]=0

Stats[? "AbilityConstantTarget"]=noone
Stats[? "LastAttackedBy"]=noone


//appearance
image_xscale=0.2
image_yscale=0.2
image_speed=0
Visual_CooldownY=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(Stats)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Abilities

//debug
if keyboard_check_pressed(ord("I")){
    if position_meeting(mouse_x,mouse_y,id){
        show_message(json_encode(Stats))
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visual Changes
//Change of sprites
if CardID!=0{
    sprite_index=global.UnitDat_Sprite[CardID]
    image_index=global.UnitDat_Image[CardID]
    if IsSelected || IsSelected_Ability{
        image_xscale=0.2+(sin(current_time/100)/100)
        image_yscale=0.2+(sin(current_time/100)/100)
    }else{
        image_xscale=0.2
        image_yscale=0.2
    }
}else{
    sprite_index=spr_cardholder
    if IsEnemy{
        image_index=1
    }else{
        image_index=0
    }
}
//shake
if ShakeAmt&gt;0{
    x=Shakex+random_range(-ShakeAmt,ShakeAmt)
    y=Shakey+random_range(-ShakeAmt,ShakeAmt)
    ShakeAmt-=0.5
    if ShakeAmt&lt;=0{
        ShakeAmt=0;
        x=Shakex
        y=Shakey
    }
}else{
    Shakex=x
    Shakey=y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw curve line when selected
if IsSelected || IsSelected_Ability{
if IsSelected{draw_set_colour(c_maroon)}
if IsSelected_Ability{draw_set_colour(c_yellow)}
var pointx=mouse_x
var pointy=mouse_y
if position_meeting(mouse_x,mouse_y,obj_cardholder){
    //normal attacking
    var _cardholder=instance_position(mouse_x,mouse_y,obj_cardholder)
    if IsSelected{
    if _cardholder.CardID!=0 &amp;&amp; _cardholder.mysocket!=mysocket &amp;&amp; global.NetworkObj.socket_to_instanceid[? _cardholder.mysocket].Team!=global.NetworkObj.socket_to_instanceid[? mysocket].Team{
        if scr_ValidAttackSpot(id,_cardholder){
            draw_set_colour(c_lime)
        }
        var pointx=_cardholder.x
        var pointy=_cardholder.y
    }
    }
    //ability attacking
    if IsSelected_Ability{
        var _no=IsAbilityTrigger(CardID,AbilityTrigger.ActivateTarget)
        if _no!=-1{
            if script_execute(global.UnitDat_AbilityTargetCheck[CardID,_no],_cardholder,id){
                draw_set_colour(c_purple)
                var pointx=_cardholder.x
                var pointy=_cardholder.y
            }
        }
    }
}
if IsSelected{
    if position_meeting(mouse_x,mouse_y,obj_heroholder){
        var _cardholder=instance_position(mouse_x,mouse_y,obj_heroholder)
        if scr_ConBattlefieldSize(global.NetworkObj.socket_to_instanceid[? _cardholder.mysocket])&lt;1{
            draw_set_colour(c_green)
            var pointx=_cardholder.x
            var pointy=_cardholder.y
        }
    }
}
var xscale=view_wview[0]/view_wport[0]
var yscale=view_hview[0]/view_hport[0]
var _x=xscale*(x-view_xview[0])
var _y=yscale*(y-view_yview[0])
var _x2=xscale*(pointx-view_xview[0])
var _y2=yscale*(pointy-view_yview[0])
draw_curve(_x,_y,_x2,_y2,100,5,10)
draw_set_colour(c_white)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw card
if CardID=0{
    if global.SelectedCard!=noone{
        image_alpha=(sin(current_time/100)+1)/2
        draw_self()
        image_alpha=1
    }
}

if CardID=0{exit;}
//draw Card
var alpha=1;
if Stats[? "AtkAlrdy"]{alpha=0.8}
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,alpha)

//drawing cooldown
if Stats[? "AbilityCooldownMax"]&gt;0{
draw_set_alpha(0.4)
draw_set_color(c_black)
var wid=sprite_get_width(sprite_index)*image_xscale
var hei=sprite_get_height(sprite_index)*image_yscale

var newhei=y+hei/2-hei*(Stats[? "AbilityCooldown"]/Stats[? "AbilityCooldownMax"])
Visual_CooldownY = lerp(Visual_CooldownY,newhei,0.2)
draw_rectangle(
    x-wid/2,
    y+hei/2,
    x+wid/2,
    Visual_CooldownY,
false)
draw_set_alpha(1)
draw_set_color(c_white)
}

//draw details
draw_set_alpha(1)
draw_text(x,y,Stats[? "IsImmune"])
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
var _x=x-sprite_get_width(sprite_index)*image_xscale/2
var _y=y-sprite_get_height(sprite_index)*image_yscale/2
draw_quad_vector(sprite_get_texture(spr_CardValBackground,0),
    _x-25,_y,
    _x,_y-25,
    _x,_y+25,
    _x+25,_y,
    )
draw_text(_x,_y,Stats[? "Hp"])

var _x=x-sprite_get_width(sprite_index)*image_xscale/4
var _y=y-sprite_get_height(sprite_index)*image_yscale/2
draw_quad_vector(sprite_get_texture(spr_CardValBackground,1),
    _x-25,_y,
    _x,_y-25,
    _x,_y+25,
    _x+25,_y,
    )
draw_text(_x,_y,Stats[? "Atk"])
draw_set_halign(fa_left)
draw_set_valign(fa_top)



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing attack types
if Stats[? "CrossAtk"]{
    var _x=x-sprite_get_width(sprite_index)*image_xscale/2
    var _y=y+sprite_get_height(sprite_index)*image_yscale/2
    draw_sprite_ext(spr_AttackType,0,_x,_y,0.03,0.03,0,c_white,1)
}
if Stats[? "PierceAtk"]{
    var _x=x-sprite_get_width(sprite_index)*image_xscale/2+50
    var _y=y+sprite_get_height(sprite_index)*image_yscale/2
    draw_sprite_ext(spr_AttackType,1,_x,_y,0.03,0.03,0,c_white,1)
}
if Stats[? "Sweep_Atk"]{
    var _x=x-sprite_get_width(sprite_index)*image_xscale/2+100
    var _y=y+sprite_get_height(sprite_index)*image_yscale/2
    draw_sprite_ext(spr_AttackType,2,_x,_y,0.03,0.03,0,c_white,1)
}
if Stats[? "SpreadAtk"]{
    var _x=x-sprite_get_width(sprite_index)*image_xscale/2+150
    var _y=y+sprite_get_height(sprite_index)*image_yscale/2
    draw_sprite_ext(spr_AttackType,3,_x,_y,0.03,0.03,0,c_white,1)
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
