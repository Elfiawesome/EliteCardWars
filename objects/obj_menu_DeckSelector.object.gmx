<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsDeckEditorSelected=false
scrollbarY=0
scrolamt=0
ScrollbarUIAmt=0
IsScrollbarPress=false

Menu=noone
Exit=false
x=-view_wport[0]
y=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deck editor
var len=9
var _ylevel=0
var _xlevel=0
var _ygap=270
var topboxh=0
//draw background
draw_set_alpha(0.5)
draw_set_color(c_black)
draw_rectangle(x,y,x+view_wport[0],y+view_hport[0],false)
draw_set_alpha(1)
draw_set_color(c_white)

var _curWorld=WorldType.Destiny2
var _StartOfNewWorld=true
for(var i=1;i&lt;(UnitID.UnitID_MAX);i++){
    if global.UnitDat_WorldType[i]!=_curWorld{
        _ylevel+=1.2
        _xlevel=0
        _curWorld=global.UnitDat_WorldType[i]
        _StartOfNewWorld=true
    }
    
    //moving to a next line
    if i&gt;1 &amp;&amp; _xlevel=len &amp;&amp; !_StartOfNewWorld{
        _ylevel++
        _xlevel=0
    }
    
    var IsSelected=false
    var IsFull=false
    var _sp=global.UnitDat_Sprite[i]
    var _im=global.UnitDat_Image[i]
    if ds_list_size(global.PlayerDeck)&gt;=20{
        IsFull=true
    }
    if ds_list_find_index(global.PlayerDeck,i)!=-1{
        IsSelected=true
    }
    
    var _x=x+(view_wport[0]/(len+1))*(_xlevel+1);
    var _y=y+150+_ygap*_ylevel+scrollbarY*100;
    _xlevel++
    var _sc=0.2;
    var _oc=1;if IsSelected{_oc=0.2}
    if !IsFull{
        draw_sprite_ext(_sp,_im,_x,_y,_sc,_sc,0,c_white,_oc)
    }else{
        draw_sprite_ext(_sp,_im,_x,_y,_sc,_sc,0,c_gray,_oc)
    }
    //drawing world type above
    if _StartOfNewWorld{
        draw_set_valign(fa_bottom)
        draw_set_color(c_black)
        draw_text(_x-sprite_get_width(_sp)*_sc/2,_y-sprite_get_height(_sp)*_sc/2,global.WorldTypeName[_curWorld])
        draw_set_valign(fa_top)
        draw_set_color(c_white)
    }
    
    //selection/deselection
    var msx=device_mouse_x_to_gui(0)
    var msy=device_mouse_y_to_gui(0)
    
    if mouse_check_button_pressed(mb_left){
    if point_in_rectangle(msx,msy,
        _x-sprite_get_width(_sp)/2*_sc,
        _y-sprite_get_height(_sp)/2*_sc,
        _x+sprite_get_width(_sp)/2*_sc,
        _y+sprite_get_height(_sp)/2*_sc,
    ){
        if !IsSelected &amp;&amp; !IsFull{
            ds_list_add(global.PlayerDeck,i)
        }else{
            ds_list_delete(global.PlayerDeck,ds_list_find_index(global.PlayerDeck,i))
        }
    }
    }
    
    var _StartOfNewWorld=false
}

//scrollbar
var _ratio=abs((scrolamt*100)/(_ylevel*_ygap))
var ScrollbarUI_he=100
var ScrollbarUI_x1=view_wport[0]-30
var ScrollbarUI_x2=view_wport[0]
var ScrollbarUI_y1=_ratio*(view_hport[0]-ScrollbarUI_he-topboxh)+topboxh
var ScrollbarUI_y2=_ratio*(view_hport[0]-ScrollbarUI_he-topboxh)+ScrollbarUI_he+topboxh
draw_set_alpha(0.2)
draw_set_color(c_black)
draw_rectangle(x+ScrollbarUI_x1,y+topboxh,x+ScrollbarUI_x2,y+view_hport[0],false)
draw_rectangle(x+ScrollbarUI_x1,y+ScrollbarUI_y1,x+ScrollbarUI_x2,y+ScrollbarUI_y2,false)
draw_set_alpha(1)
draw_set_color(c_white)
var msx=device_mouse_x_to_gui(0)
var msy=device_mouse_y_to_gui(0)
if point_in_rectangle(msx,msy,ScrollbarUI_x1,ScrollbarUI_y1,ScrollbarUI_x2,ScrollbarUI_y2){
if !IsScrollbarPress{
    if mouse_check_button_pressed(mb_left){
        IsScrollbarPress=true
    }
}
}
if IsScrollbarPress{
    if mouse_check_button_released(mb_left){
        IsScrollbarPress=false
    }
}
if IsScrollbarPress{
    scrolamt=-(((device_mouse_y_to_gui(0)-topboxh)/view_hport[0])*(_ylevel*_ygap))/100
}
//scrolling
var amt=5
scrollbarY=lerp(scrollbarY,scrolamt,0.6)
if mouse_wheel_down(){
    if scrolamt*100&gt;=-_ylevel*_ygap
    {
        scrolamt--
    }
}
if mouse_wheel_up(){
    if scrolamt&lt;0{
        scrolamt++
    }
}
scrolamt=clamp(scrolamt,-(_ylevel*_ygap)/100,0)

//draw top bar
//draw_set_color(c_white)
//draw_rectangle(x,y,x+view_wport[0],y+topboxh,false)
//drawing header
draw_set_halign(fa_center)
draw_set_color(c_black)
draw_text(x+view_wport[0]/2,y+10,string(ds_list_size(global.PlayerDeck))+"/20 Cards")
draw_set_halign(fa_left)
draw_set_color(c_white)

//exit button
var _x=view_wport[0]-100+x
var _y=50+y
var _w=50
var _h=50
draw_set_color(c_red)
draw_set_alpha(0.5)
draw_rectangle(_x,_y,_x+_w,_y+_h,false)
if mouse_check_button_pressed(mb_left){
    if point_in_rectangle(msx, msy, _x, _y, _x+_w, _y+_h,){
        Exit=true;Menu.IsoverlayOn=false;with(Menu){scr_menu_update_deckfile()};
    }
}
draw_line_width(_x,_y,_x+_w,_y+_h,3)
draw_line_width(_x,_y+_h,_x+_w,_y,3)
draw_set_alpha(1)
if Menu.DeckEditorPage!=id{Exit=true}

//exit animation
if !Exit{
    x=lerp(x,0,0.1)
    Menu.DeckEditorScrollAmt[0]=scrolamt
}else{
    x=lerp(x,-view_wport[0],0.1)
    if abs(x+view_wport[0])&lt;10{
        instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing character details
var len=9
var _ylevel=0
var _xlevel=0
var _ygap=270

var _curWorld=WorldType.Destiny2
for(var i=1;i&lt;(UnitID.UnitID_MAX);i++){
    if global.UnitDat_WorldType[i]!=_curWorld{
        _ylevel+=1.2
        _xlevel=0
        _curWorld=global.UnitDat_WorldType[i]
    }
    var _sp=global.UnitDat_Sprite[i]
    var _im=global.UnitDat_Image[i]
    
    var _x=x+(view_wview[0]/(len+1))*(_xlevel+1);
    var _y=y+150+_ygap*_ylevel+scrollbarY*100;
    _xlevel++
    
    //moving to a next line
    if _xlevel=len{
        _ylevel++
        _xlevel=0
    }
    
    //selection/deselection
    var msx=device_mouse_x_to_gui(0)
    var msy=device_mouse_y_to_gui(0)
    
    if point_in_rectangle(msx,msy,
        _x-sprite_get_width(_sp)/2*_sc,
        _y-sprite_get_height(_sp)/2*_sc,
        _x+sprite_get_width(_sp)/2*_sc,
        _y+sprite_get_height(_sp)/2*_sc,
    ){
        var _wid=sprite_get_width(_sp)*0.6
        var _hei=sprite_get_height(_sp)*0.6
        var _maxX=clamp(msx+_wid/2,_wid/2,view_wport[0]-_wid/2)
        var _maxY=clamp(msy+_hei/2,_hei/2,view_hport[0]-_hei/2)
        draw_sprite_ext(_sp,_im,_maxX,_maxY,0.6,0.6,0,c_white,1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
