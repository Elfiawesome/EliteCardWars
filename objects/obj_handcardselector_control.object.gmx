<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cardlist=ds_list_create()
cardtypelist=ds_list_create()
Objlist=ds_list_create()
CardHolderInitiator=-1//the cardholder whom started this
SelectedCardID=0//current selection of card
AnimationStage=0
//starting position
x=0
y=-view_hport[0]
backtgty=0
ControlParent=0
//scrolling
scrolamt=0
scrollbarY=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//destroy ds
ds_list_destroy(cardlist)
ds_list_destroy(cardtypelist)
ds_list_destroy(Objlist)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation stage checks
switch(AnimationStage){
    case 3://pack up all
        backtgty=-view_hview[0]
        for(var i=0;i&lt;ds_list_size(Objlist);i++){
            Objlist[| i].tgty=-200
            Objlist[| i].tgtx=view_wport[0]/2
        }
        if abs(y-backtgty)&lt;0.1{
            AnimationStage=4
        }
    break;
    case 4://destroy
        for(var i=0;i&lt;ds_list_size(Objlist);i++){
            with(Objlist[| i]){instance_destroy()}
        }
        instance_destroy()
    break;
}

if ControlParent.GUIObjectOrder[| 0]=id{
switch(AnimationStage){
    case 0://bring black background
        if x &gt; (-view_wview[0]/4*3){
            AnimationStage=1
        }
    break;
    case 1://create the cards
        var xMid=view_wport[0]/2;
        var yMid=view_hport[0]*1/10;
        var HorRad=view_wport[0]*0.45;
        var VerRad=view_hport[0]*0.4;
        for(var i=0;i&lt;ds_list_size(cardlist);i++){
            var _child=instance_create(view_wport[0]/2,-200,obj_cardselection);
            ds_list_add(Objlist,_child)//add to obj list
            angle=pi/2+degtorad(10)*(ds_list_size(cardlist)/2-i)
            _child.CardID=cardlist[| i]
            _child.Type=cardtypelist[| i]
            _child.tgtx = xMid+(HorRad*cos(angle));
            _child.tgty = yMid+(VerRad*sin(angle));
            _child.Parent=id
        }
        AnimationStage=2
    break;
}
}
//keep background
y=lerp(y,backtgty,0.2)

if AnimationStage&lt;3{
    //exit out of gui
    if keyboard_check_pressed(vk_escape){
        AnimationStage=3
        ds_list_delete(ControlParent.GUIObjectOrder,0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.2)
draw_set_color(c_black)
//draw black background
draw_rectangle(x,y,x+view_wport[0],y+view_hport[0],false)

//drawing all the cards
for(var i=0;i&lt;ds_list_size(Objlist);i++){
    with(Objlist[| i]){
        if Type=0{var sprite=global.UnitDat_Sprite[CardID];var image=global.UnitDat_Image[CardID]}
        if Type=1{var sprite=global.SpellDat_Sprite[CardID];var image=global.SpellDat_Image[CardID]}
        if CardID!=0{
        draw_sprite_ext(
            sprite,
            image,
            x,y,scale,scale,0,c_white,1
        )
        }
    }
}

//draw title
draw_set_halign(fa_center)
draw_text(x+view_wport[0]/2,y+10,"Select Card")
draw_text(x+view_wport[0]/2,y+30,"Press 'esc' to cancel")
draw_set_halign(fa_left)

draw_set_alpha(1)
draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
