<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game variables
inherit_svrclt_create()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(true)
scr_init_network()
mysocket=0

global.NetworkObj=id
//create server
var type=network_socket_tcp
port=3115
var maxclients=20
server=network_create_server(type,port,maxclients)
while(server &lt; 0){
    if port &gt;= 65535{
        show_message("Server Failed!")
        break;
    }
    port++
    server=network_create_server(type,port,maxclients)
}
//start pinging clients
LastServerPinged=current_time
alarm[0]=60

//Battlefield Update Timer
BattlefieldUpdateTimer=160
BattlefieldUpdateTimerMax=160
//Bot Counter for adding them
BotCounterSocket=-1

//create myself -&gt; (server player object)
var _inst=instance_create(100,100,obj_player_con);
_inst.name="SERVER OWNER"
_inst.IsLocal=true
_inst.mysocket=0
_inst.Team=0
ds_list_copy(_inst.DeckList,global.PlayerDeck)
ds_list_shuffle(_inst.DeckList)
ds_list_copy(_inst.SpellList,global.PlayerSpells)
ds_list_shuffle(_inst.SpellList)
_inst.PlayerHeroID=global.PlayerHero
socket_to_instanceid[? 0]=_inst
ds_list_add(socketlist,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(socketlist)
ds_map_destroy(socket_to_instanceid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping every 60
//Ask every client to ping to the server
for(var i=0;i&lt;ds_list_size(socketlist);i++){
    var sock=socketlist[| i]
    //Ask only clients who has already pinged back
    if socket_to_instanceid[? sock].HasPinged=true{
        buffer=buffer_create(1024,buffer_fixed,1)
        buffer_write(buffer,buffer_s16,NETWORKPKT.PING)
        network_send_packet(sock,buffer,buffer_tell(buffer))
        buffer_delete(buffer)
        //reset clients HasPinged
        socket_to_instanceid[? sock].HasPinged=false
    }else{
        //add more ping to those clients yet to be received
        socket_to_instanceid[? sock].Ping+=(current_time-LastServerPinged)
    }
}
//Set server's ping
socket_to_instanceid[? 0].Ping=0

//reset new last server got pinged
LastServerPinged=current_time
alarm[0]=60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battlefield Update Timer
if BattlefieldUpdateTimer&gt;0{
    BattlefieldUpdateTimer--
}else{
    BattlefieldUpdateTimer=BattlefieldUpdateTimerMax
    svr_ForceBattlefieldUpdate()
}

//bot problems:
//  -Some Spells dont work on bots eg SpringBean
//
//adding another 'bot player' into the game
if global.IsGame{
if keyboard_check_pressed(vk_control) &amp;&amp; !(mouse_wheel_down() || mouse_wheel_up()){
var _inst=instance_create(100,100,obj_player_con);
_inst.name="Bot "+string(abs(BotCounterSocket))
_inst.IsLocal=false
_inst.mysocket=BotCounterSocket; BotCounterSocket-- //-ds_list_size(socketlist) - 1
_inst.Team=0
_inst.IsBot=true
ds_list_add(_inst.DeckList,
    UnitID.RedAlert3_Conscript,
    UnitID.RedAlert3_MigFighter,
    UnitID.RedAlert3_MirageTank,
    UnitID.RedAlert3_GigaFortress,
    UnitID.RedAlert3_Stingray,
    UnitID.RedAlert3_Kirov,
    UnitID.RedAlert3_HammerTank,
    UnitID.RedAlert3_Dreadnought,
    UnitID.MadnessCombat_Auditor,
    UnitID.MadnessCombat_HankJwimbleton,
    UnitID.MadnessCombat_TheSavior,
    UnitID.SouthPark_InuitKenny,
    UnitID.SouthPark_Firkle,
    UnitID.SouthPark_Fastpass,
    UnitID.SouthPark_Henrietta,
    UnitID.SouthPark_ZenCartman,
    UnitID.Unturned_AcidZombie,
    UnitID.Unturned_BurnerZombie,
    UnitID.Unturned_AcidZombie,
    UnitID.Unturned_Zombie,
)
ds_list_shuffle(_inst.DeckList)
ds_list_copy(_inst.SpellList,global.PlayerSpells)
ds_list_shuffle(_inst.SpellList)
_inst.PlayerHeroID=global.PlayerHero
socket_to_instanceid[? _inst.mysocket]=_inst
ds_list_add(socketlist,_inst.mysocket)


//tell all other clients to create this player with the Player Init Data Values given(str)
for(var i=0;i&lt;ds_list_size(socketlist);i++){
    buffer=buffer_create(2048,buffer_fixed,1)
    buffer_write(buffer,buffer_s16,NETWORKPKT.PLAYERINITCREATE)
    buffer_write(buffer,buffer_s16,_inst.mysocket)
    buffer_write(buffer,buffer_string,scr_Player_Init_Data_Get(_inst))
    network_send_packet(socketlist[| i],buffer,buffer_tell(buffer))
    buffer_delete(buffer)
}

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive Packets
var type = async_load[? "type"]
switch(type){
    case network_type_connect:
        //connecting player
        var socket=async_load[? "socket"]
        if !global.IsGame{
            scr_svr_connect(socket)
        }
    break;
    case network_type_disconnect:
        //disconnecting player
        var socket=async_load[? "socket"]
        if ds_list_find_index(socketlist,socket)!=-1{
            scr_svr_disconnect(socket)
        }
    break;
    case network_type_data:
        //receive packet
        var buffer=async_load[? "buffer"]
        var socket=async_load[? "id"]
        if ds_list_find_index(socketlist,socket)!=-1{
            buffer_seek(buffer,buffer_seek_start,0)
            scr_svr_rp(socket,buffer)
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
if keyboard_check_pressed(ord("P")){IsDebug=!IsDebug}
if !IsDebug{exit;}
//set background layer
draw_set_color(c_black)
draw_set_alpha(0.4)
draw_rectangle(0,0,view_wview[0],view_hview[0],false)
draw_set_color(c_green)
draw_set_alpha(1)

var CurY=0
draw_text(0,CurY,"FPS: "+string(fps));CurY+=30
draw_text(0,CurY,"Currently Running on:");CurY+=30
draw_text(30,CurY,"Port : "+string(port));CurY+=30
draw_text(0,CurY,"Mysocket: "+string(mysocket));CurY+=30
draw_text(0,CurY,"Instances: "+string(instance_count));CurY+=30
draw_text(0,CurY,"Animator Count: "+string(instance_number(obj_animator)));CurY+=30

for(var i=0;i&lt;ds_list_size(socketlist);i++){
    draw_text(0,CurY+(i*20),string(socketlist[| i])+": "+string(socket_to_instanceid[? socketlist[| i]].name))
    draw_text(180,CurY+(i*20),"Ping: "+string(socket_to_instanceid[? socketlist[| i]].Ping))
};CurY+=(i*20)

if global.GameStage=GAMESTAGE.PLAYERTURNS{
_t="Prepping Turn"
}else{
_t="Attacking Turn"
}
draw_text(0,CurY+(i*20),"GAMESTAGE: "+string(_t));CurY+=30
draw_text(0,CurY+(i*20),"GameLifespan: "+string(GameLifespan));CurY+=30

if Turn&gt;=0{
    draw_text(view_wport[0]/2,100,"Turn: "+string(Turnstage[Turn]))
    draw_text(view_wport[0]/2,130,string(mysocket))
}else{
    draw_text(view_wport[0]/2,100,string(ds_list_size(ReadySocket))+"/"+string(array_length_1d(Turnstage))+" is ready")
}

if instance_exists(socket_to_instanceid[? mysocket]){
    CurY+=30
    draw_text(CurY,0,"GUI Object order List:");CurY+=40
    for(var i=0;i&lt;ds_list_size(socket_to_instanceid[? mysocket].GUIObjectOrder);i++){
        draw_text(0,CurY,string(socket_to_instanceid[? mysocket].GUIObjectOrder[| i])+": "+object_get_name(socket_to_instanceid[? mysocket].GUIObjectOrder[| i].object_index));CurY+=30
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
