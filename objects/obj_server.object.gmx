<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game variables
inherit_svrclt_create()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(true)
scr_init_network()
mysocket=0

global.NetworkObj=id
//create server
var type=network_socket_tcp
var port=3115
var maxclients=20
var server=network_create_server(type,port,maxclients)
if server&lt;0{
    show_message("Server Failed!")
}
//start pinging clients
LastServerPinged=current_time
alarm[0]=60

//Battlefield Update Timer
BattlefieldUpdateTimer=160
BattlefieldUpdateTimerMax=160

//create myself -&gt; (server player object)
var _inst=instance_create(100,100,obj_player_con);
_inst.name="SERVER OWNER"
_inst.IsLocal=true
_inst.mysocket=0
ds_list_copy(_inst.DeckList,global.PlayerDeck)
ds_list_shuffle(_inst.DeckList)
socket_to_instanceid[? 0]=_inst
ds_list_add(socketlist,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping every 60
//Ask every client to ping to the server
for(var i=0;i&lt;ds_list_size(socketlist);i++){
    var sock=socketlist[| i]
    //Ask only clients who has already pinged back
    if socket_to_instanceid[? sock].HasPinged=true{
        buffer=buffer_create(1024,buffer_fixed,1)
        buffer_write(buffer,buffer_s16,NETWORKPKT.PING)
        network_send_packet(sock,buffer,buffer_tell(buffer))
        buffer_delete(buffer)
        //reset clients HasPinged
        socket_to_instanceid[? sock].HasPinged=false
    }else{
        //add more ping to those clients yet to be received
        socket_to_instanceid[? sock].Ping+=(current_time-LastServerPinged)
    }
}
//Set server's ping
socket_to_instanceid[? 0].Ping=0

//reset new last server got pinged
LastServerPinged=current_time
alarm[0]=60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battlefield Update Timer
if BattlefieldUpdateTimer&gt;0{
    BattlefieldUpdateTimer--
}else{
    BattlefieldUpdateTimer=BattlefieldUpdateTimerMax
    svr_ForceBattlefieldUpdate()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive Packets
var type = async_load[? "type"]
switch(type){
    case network_type_connect:
        //connecting player
        var socket=async_load[? "socket"]
        scr_svr_connect(socket)
    break;
    case network_type_disconnect:
        //disconnecting player
        var socket=async_load[? "socket"]
        scr_svr_disconnect(socket)
    break;
    case network_type_data:
        //receive packet
        var buffer=async_load[? "buffer"]
        var socket=async_load[? "id"]
        buffer_seek(buffer,buffer_seek_start,0)
        scr_svr_rp(socket,buffer)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
if keyboard_check_pressed(ord("P")){IsDebug=!IsDebug}
if !IsDebug{exit;}
var CurY=0
draw_text(0,CurY,"Mysocket: "+string(mysocket));CurY+=30
draw_text(0,CurY,"Instances: "+string(instance_count));CurY+=30
draw_text(0,CurY,"Animator Count: "+string(instance_number(obj_animator)));CurY+=30
for(var i=0;i&lt;ds_list_size(socketlist);i++){
    draw_text(0,CurY+(i*20),string(socketlist[| i])+": "+string(socket_to_instanceid[? socketlist[| i]].name))
    draw_text(180,CurY+(i*20),"Ping: "+string(socket_to_instanceid[? socketlist[| i]].Ping))
};CurY+=(i*20)

if global.GameStage=GAMESTAGE.PLAYERTURNS{
_t="Prepping Turn"
}else{
_t="Attacking Turn"
}
draw_text(0,CurY+(i*20),"GAMESTAGE: "+string(_t));CurY+=30
draw_text(0,CurY+(i*20),"GameLifespan: "+string(GameLifespan));CurY+=30

if Turn&gt;=0{
    draw_text(view_wport[0]/2,100,"Turn: "+string(Turnstage[Turn]))
    draw_text(view_wport[0]/2,130,string(mysocket))
}else{
    draw_text(view_wport[0]/2,100,string(ds_list_size(ReadySocket))+"/"+string(array_length_1d(Turnstage))+" is ready")
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
