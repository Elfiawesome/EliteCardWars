<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Networking Vars
//network variables
mysocket=-1
IsLocal=false
//ping
Ping=0
HasPinged=true
//characteristics
name=""
Team=-1
IsBot=false

BotSpeedMax=30
BotSpeed=BotSpeedMax


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init Game variables
scr_units_init()
//Hand Cards
cardList=ds_list_create()
HandCards=ds_list_create()
//deck cards
DeckList=ds_list_create()
SpellList=ds_list_create()
//dead card lists
DeadCardList=ds_list_create()
DeadCardListTurn=ds_list_create()
//Cardholder lists
Cardholderlist=ds_list_create()
PlayerHeroID=0//used for setting up the game
Points=0
IsSpectating=false
CameraFocus=-1//still not sure about the camera?
CameraFocusNo=0
GUIObjectOrder=ds_list_create()
GUIHeroHpWidth=0
GUIHeroPtWidth=0
IsHeroActivateButton=false
CardDrawerControl=noone
global.HoveredCard=noone
global.ShowHands=false
global.SelectedCard=noone
Homex=x
Homey=y


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(cardList)
ds_list_destroy(HandCards)
ds_list_destroy(DeckList)
ds_list_destroy(SpellList)
ds_list_destroy(DeadCardList)
ds_list_destroy(DeadCardListTurn)
ds_list_destroy(GUIObjectOrder)
//destroy all of my card holders
for(var i=0;i&lt;ds_list_size(Cardholderlist);i++){
    with(Cardholderlist[| i]){instance_destroy()}
}
ds_list_destroy(Cardholderlist)
//destroy hero
with(Hero){instance_destroy()}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Managing of Hand Cards
if IsLocal &amp;&amp; global.IsGame &amp;&amp; !IsSpectating &amp;&amp; ds_list_empty(GUIObjectOrder){
if keyboard_check_pressed(vk_enter){
    //GameEvent_draw_specific_card(irandom_range(1,UnitID.UnitID_MAX-1))
    //var _c1=GameEvent_draw_specific_card(real(get_string("Enter the unit ID","0")),1)
    
    //var _c1=GameEvent_draw_specific_card(SpellID.PlantVsZombies_SpringBean,1)
    //var _c1=GameEvent_draw_specific_card(SpellID.RedAlert3_ObservationPost,1)
    var _c1=GameEvent_draw_specific_card(SpellID.RedAlert3_ObservationPost,1)
}
if global.SelectedCard=noone{
    if position_meeting(mouse_x,mouse_y,obj_card){
        var _card=instance_position(mouse_x,mouse_y,obj_card)
        global.HoveredCard=_card
        if mouse_check_button_pressed(mb_left){
            global.SelectedCard=_card
            global.HoveredCard=noone
        }
    }
}
if global.SelectedCard!=noone{
    if mouse_check_button_released(mb_left){
        //Placing UNIT card down
        player_con_PlacingUnitCardDown()
        //Activating UnitCardOnMe
        player_con_PlacingUnitCardDown_For_UnitCardOnMe()
        //Placing Spell card down
        if !Hero.Stats[? "DisableSpells"]{
            player_con_PlacingSpellCardDown()
        }
        
        global.SelectedCard=noone
    }
}
if global.SelectedCard=noone{
    if mouse_y&gt;(view_hview[0]*7/10+view_yview[0]){
        global.ShowHands=true
    }else{
        global.ShowHands=false
    }
}else{
    global.ShowHands=false
}

//camera movement
if global.NetworkObj.Turn!=-1{//during player's turn
    var amt=50
    if abs(view_xview[0]-mouse_x)&lt;100{view_xview[0]-=amt}
    if abs((view_xview[0]+view_wview[0])-mouse_x)&lt;100{view_xview[0]+=amt}
    if abs(view_yview[0]-mouse_y)&lt;100{view_yview[0]-=amt}
    if abs((view_yview[0]+view_hview[0])-mouse_y)&lt;200{view_yview[0]+=amt}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pressing Q to start game
if IsLocal &amp;&amp; !global.IsGame{

if keyboard_check_pressed(ord("Q")){
    //only if server
    if global.NetworkObj.object_index=obj_server{
        with(global.NetworkObj){
            //setting up Team Map
            update_json_TeamMap()
            //create card holders
            create_AllCardHolders(TeamMap)
            //set up turnstage
            update_Turnstage(TeamMap)
            //send server an example packet
            for(var i=0;i&lt;ds_list_size(socketlist);i++){
                buffer=buffer_create(2048,buffer_fixed,1)
                buffer_write(buffer,buffer_s16,NETWORKPKT.STARTGAME)
                buffer_write(buffer,buffer_string,json_encode(TeamMap))
                network_send_packet(socketlist[| i],buffer,buffer_tell(buffer))
                buffer_delete(buffer)
            }
            //reimburse points
            GameEvent_Con_ReimbursePoints()
            GameEvent_Con_CardDrawed()
            //set the game to ready
            global.IsGame=true
            CameraFocus=socket_to_instanceid[? Turnstage[Turn]];
            CameraFocusNo=Turn
        }
    }
}

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Your Turn
if IsLocal &amp;&amp; global.IsGame &amp;&amp; !IsSpectating{
if ds_list_empty(GUIObjectOrder){
    //Camera Position
    player_con_CameraPosition()
    
    //Pressing "A" on a Cardholders
    player_con_AbilitySelection()
    
    //Activate Target for Heroes
    player_con_HeroAbilitySelection()
}
//Card Selector
player_con_CardSelectorControl()
}

if IsBot &amp;&amp; global.IsGame &amp;&amp; !IsSpectating{
    if global.NetworkObj.Turnstage[global.NetworkObj.Turn]=mysocket{
    if BotSpeed=BotSpeedMax{
        BotSpeed=0
    }else{
        BotSpeed++
    }

    if global.GameStage=GAMESTAGE.PLAYERTURNS &amp;&amp; BotSpeed=BotSpeedMax{
        //first draw cards
        CardID=DeckList[| 0]
        ds_list_delete(DeckList,0)
        //tell server I drawed a card
        var _m=ds_map_create();
        _m[? "socket"]=mysocket;
        _m[? "ID"]=CardID;
        _m[? "Type"]=0
        var _str=json_encode_destroy(_m);
        with(global.NetworkObj){
            if global.NetworkObj.object_index=obj_server{
                svr_AddCardIntoHand(_str,other.mysocket)
            }
        }
        
        //see if theres a need to place cards
        for(var ii=ds_list_size(HandCards)-1; ii&gt;=0; ii--){
            var _cardCur=HandCards[| ii]
            var _m=json_decode(_cardCur)
            var _id=_m[? "ID"]
            ds_map_destroy(_m)
            for(var i=0;i&lt;ds_list_size(Cardholderlist);i++){
                var _cardholder=Cardholderlist[| i]
                if _cardholder.CardID=0 &amp;&amp; Points&gt;=GetPointDeductionValue(global.UnitDat_Pt[_id]){
                Points-=GetPointDeductionValue(global.UnitDat_Pt[_id])
                with(global.NetworkObj){
                    if global.NetworkObj.object_index=obj_server{
                    //summoning character
                    svr_SummonCard(other.mysocket,i,_id)
                    //remove card from hand
                    var _m=ds_map_create();
                    _m[? "socket"]=other.mysocket;
                    _m[? "pos"]=ii
                    _m[? "value"]=_cardCur
                    var _str=json_encode_destroy(_m);
                    svr_RemoveCardFromHand(_str,other.mysocket)
                    }
                    BotSpeed=0
                }
                break;
                }
            }
        }
        //next turn
    }
    //Deciding who to attack
    if global.GameStage=GAMESTAGE.ATTACKINGTURN &amp;&amp; BotSpeed=BotSpeedMax{
        //who to attack?
        var _MapStrategy=AISelectVictim_Easy()//AISelectVictims_Default()
        
        //Attack Cardholders
        var HoldersStrat=_MapStrategy[? "Holders"]
        for (var k=ds_map_find_first(HoldersStrat);!is_undefined(k);k=ds_map_find_next(HoldersStrat,k)){
            var _cardholder=real(k);
            var _attackinglist=HoldersStrat[? k]
            player_con_AttackCardholder(_attackinglist,_cardholder,0)
        }
        //Attack Heroes
        var HeroesStrat=_MapStrategy[? "Heroes"]
        for (var k=ds_map_find_first(HeroesStrat);!is_undefined(k);k=ds_map_find_next(HeroesStrat,k)){
            var _Hero=real(k);
            var _attackinglist=HeroesStrat[? k]
            player_con_AttackHero(_attackinglist,_Hero,0)
        }
        ds_map_destroy(_MapStrategy)
        
    }
    //moving on to the next turn
    if BotSpeed=BotSpeedMax &amp;&amp; ds_list_empty(global.AnimatorSys[0].AnimatingOrderList){
    with(global.NetworkObj){
        if global.NetworkObj.object_index=obj_server{
            svr_TurnstageMoveOn()
        }
        if global.NetworkObj.object_index=obj_client{
            buffer=buffer_create(1024,buffer_fixed,1)
            buffer_write(buffer,buffer_s16,NETWORKPKT.TURNMOVEON)
            network_send_packet(client,buffer,buffer_tell(buffer))
            buffer_delete(buffer)
        }
    }
    }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Attacking Phase
if IsSpectating{exit;}
if global.IsGame &amp;&amp; ds_list_empty(GUIObjectOrder){
    if IsLocal &amp;&amp; global.GameStage=GAMESTAGE.ATTACKINGTURN &amp;&amp; global.NetworkObj.Turnstage[global.NetworkObj.Turn]=mysocket{
        //selecting cardholders
        if mouse_check_button_pressed(mb_left){
            if position_meeting(mouse_x,mouse_y,obj_cardholder){
                var _cardholder=instance_position(mouse_x,mouse_y,obj_cardholder)
                if ds_list_find_index(global.NetworkObj.SelectedCardHolders_Ability,_cardholder)!=-1{exit;}
                //Selecting MY unit
                if _cardholder.CardID!=0{
                if _cardholder.mysocket=mysocket &amp;&amp; !_cardholder.Stats[? "AtkAlrdy"]  &amp;&amp; !_cardholder.Stats[? "IsFrozen"]{
                    if ds_list_find_index(Cardholderlist,_cardholder)!=-1{
                    if ds_list_find_index(global.NetworkObj.SelectedCardHolders,_cardholder)=-1{
                        ds_list_add(global.NetworkObj.SelectedCardHolders,_cardholder)
                        _cardholder.IsSelected=true
                    }else{
                        ds_list_delete(global.NetworkObj.SelectedCardHolders,ds_list_find_index(global.NetworkObj.SelectedCardHolders,_cardholder))
                        _cardholder.IsSelected=false
                    }
                    }
                }
                //attacking Enemy unit (ie cardholder)
                if _cardholder.Stats[? "Finalized_Hp"]&gt;0 &amp;&amp; !ds_list_empty(global.NetworkObj.SelectedCardHolders){
                    var AttackingObjects=ds_list_create()
                    //activate attacking sequence
                    player_con_AttackCardholder(global.NetworkObj.SelectedCardHolders,_cardholder,AttackingObjects)
                    //Making cardholders not selected
                    for(var i=0;i&lt;ds_list_size(AttackingObjects);i++){
                        with(AttackingObjects[| i]){IsSelected=false}
                        ds_list_delete(global.NetworkObj.SelectedCardHolders,ds_list_find_index(global.NetworkObj.SelectedCardHolders,AttackingObjects[| i]))
                    }
                    ds_list_destroy(AttackingObjects)
                }
                }
            }
            if position_meeting(mouse_x,mouse_y,obj_heroholder){
                var _cardholder=instance_position(mouse_x,mouse_y,obj_heroholder)
                //Attacking Hero
                if !ds_list_empty(global.NetworkObj.SelectedCardHolders){
                    var AttackingObjects=ds_list_create()
                    //Activate Attacking Hero Sequence
                    player_con_AttackHero(global.NetworkObj.SelectedCardHolders,_cardholder,AttackingObjects)
                    //Making cardholders not selected
                    for(var i=0;i&lt;ds_list_size(AttackingObjects);i++){
                        with(AttackingObjects[| i]){IsSelected=false}
                        ds_list_delete(global.NetworkObj.SelectedCardHolders,ds_list_find_index(global.NetworkObj.SelectedCardHolders,AttackingObjects[| i]))
                    }
                    ds_list_destroy(AttackingObjects)
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Hero Stats
if IsLocal &amp;&amp; global.IsGame  &amp;&amp; !IsSpectating &amp;&amp; ds_list_empty(GUIObjectOrder){
//Current Turns
draw_set_font(ft_Ebrima_s12)
draw_set_halign(fa_center)
var _x=view_wport[0]*3/4;var _y=30;
var _str=""
if global.GameStage=GAMESTAGE.PLAYERTURNS{_str="Player Turns"}
if global.GameStage=GAMESTAGE.ATTACKINGTURN{_str="Attacking Turns"}
draw_text(_x,_y,_str)
with(global.NetworkObj){_str=socket_to_instanceid[? Turnstage[Turn]].name}
draw_text(_x,_y*2,_str)
draw_set_halign(fa_left)
draw_set_font(ft_number)

//Hero Health GUI
var _x=30;var _y=30;
var _wid=view_wport[0]/2 - _x
var _bwid=_wid/Hero.Stats[? "Base_Hp"]
var _hei=40
var _tgtwidth=_bwid*Hero.Stats[? "Hp"]
GUIHeroHpWidth=lerp(GUIHeroHpWidth,_tgtwidth,0.7)
//set main color
draw_set_color(3618734)
draw_set_font(ft_Ebrima_s12);draw_text(_x,_y-2,"Hearts: "+string(Hero.Stats[? "Hp"]));draw_set_font(ft_number)
//health bar
draw_set_alpha(0.6)
draw_rectangle(_x,_y,_x+GUIHeroHpWidth,_y+_hei,false)
//background
draw_set_alpha(0.1)
draw_rectangle(_x,_y,_x+_wid,_y+_hei,false)
//health lines
draw_set_alpha(1)
draw_set_color(c_white)
for(i=1;i&lt;Hero.Stats[? "Hp"];i++){
    draw_line_width(_x+_bwid*i,_y+_hei-15,_x+_bwid*i,_y+_hei,3)
}
//bottom line
draw_set_color(c_red)
draw_rectangle(_x,_y+_hei-5,_x+_wid,_y+_hei,false)
draw_set_color(c_white)


//Hero Points GUI
var _x=30;var _y=80;
var _wid=view_wport[0]/2 - _x
var _bwid=_wid/50
var _hei=40
var _tgtwidth=_bwid*Points
GUIHeroPtWidth=lerp(GUIHeroPtWidth,_tgtwidth,0.7)
//set main color
draw_set_color(11759175)
draw_set_font(ft_Ebrima_s12);draw_text(_x,_y-2,"Points: "+string(Points));draw_set_font(ft_number)
//health bar
draw_set_alpha(0.6)
draw_rectangle(_x,_y,_x+GUIHeroPtWidth,_y+_hei,false)
//background
draw_set_alpha(0.1)
draw_rectangle(_x,_y,_x+_wid,_y+_hei,false)
//health lines
draw_set_alpha(1)
draw_set_color(c_white)
for(i=1;i&lt;Points;i++){
    draw_line_width(_x+_bwid*i,_y+_hei-15,_x+_bwid*i,_y+_hei,3)
}
//bottom line
draw_set_color(12535040)
draw_rectangle(_x,_y+_hei-5,_x+_wid,_y+_hei,false)
draw_set_color(c_white)
}
if keyboard_check(vk_tab){
    with(global.NetworkObj){
    var _x=view_wport[0]/2
    var _y=100
    var _wid=300
    var _hei=40
    
    for(i=0;i&lt;ds_list_size(socketlist);i++){
        draw_set_color(c_white)
        draw_set_alpha(0.1)
        draw_rectangle(_x-_wid/2,_y+_hei*(i),_x+_wid/2,_y+_hei*(i+1),false)
        draw_set_alpha(1)
        var _o=socket_to_instanceid[? socketlist[| i]]
        var _s="PLAYER NOT FOUND"
        if _o!=undefined{_s=socket_to_instanceid[? socketlist[| i]].name}
        draw_text(_x-_wid/2,_y+_hei*(i),_s)
        draw_set_color(c_white)
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Hero's Ability &amp;&amp; Check for button pressed
IsHeroActivateButton=false
if global.IsGame &amp;&amp; IsLocal &amp;&amp; !IsSpectating &amp;&amp; global.NetworkObj.Turnstage[global.NetworkObj.Turn]=mysocket &amp;&amp; ds_list_empty(GUIObjectOrder){
    if IsHeroAbilityTrigger(Hero.CardID,AbilityTrigger.ActivateTarget)!=-1 || IsHeroAbilityTrigger(Hero.CardID,AbilityTrigger.Activate)!=-1{
    if script_execute(global.HeroDat_AbilityTargetSelectCheck[Hero.CardID],Hero) &amp;&amp; Hero.Stats[? "AbilityCooldown"]=0 &amp;&amp; Hero.Stats[? "AbilityAlrdy"]=false{
    draw_set_font(ft_Ebrima_s12)
    var _t="Hero's Ability"
    var _w=string_width(_t)
    var _h=string_height(_t)
    var _x=30
    var _y=140
    draw_set_alpha(0.2)
    draw_set_color(c_purple)
    draw_rectangle(_x,_y,_x+_w,_y+_h,false)
    draw_rectangle(_x-5,_y-5,_x+_w+5,_y+_h+5,false)
    draw_set_alpha(1)
    draw_set_color(c_white)
    draw_text(_x,_y,_t)
    draw_set_font(ft_number)
    
    //Is Hero Button Pressed
    var msx=device_mouse_x_to_gui(0)
    var msy=device_mouse_y_to_gui(0)
    if mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(msx,msy,_x-5,_y-5,_x+_w+5,_y+_h+5){
        IsHeroActivateButton=true
    }
    if keyboard_check_pressed(ord("A")) &amp;&amp; position_meeting(mouse_x,mouse_y,Hero){
        IsHeroActivateButton=true
    }
    
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing Teams before game
if IsLocal &amp;&amp; !global.IsGame{
var sl=global.NetworkObj.socketlist
var stid=global.NetworkObj.socket_to_instanceid

with(global.NetworkObj){update_json_TeamMap()}
var NeedToUpdateTeamMap=false
draw_set_font(ft_Ebrima_s12)
for(var i=0;i&lt;ds_list_size(sl);i++){
    var _name=stid[? sl[| i]].name
    var _namewid=string_width(_name)
    var _namehei=string_height(_name)
    var _x=100
    var _y=100+i*60
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_text(_x,_y,_name)
    draw_set_alpha(0.2)
    draw_rectangle(_x,_y,_x+_namewid,_y+_namehei,false)
    
    var _name=stid[? sl[| i]].Team
    var _namewid=string_width(_name)
    var _namehei=string_height(_name)
    var _x=400
    draw_set_alpha(1)
    draw_text(_x,_y,_name)
    draw_set_alpha(0.2)
    draw_rectangle(_x,_y,_x+_namewid,_y+_namehei,false)
    draw_set_alpha(1)
    
    //selection/deselection
    var msx=device_mouse_x_to_gui(0)
    var msy=device_mouse_y_to_gui(0)
    if point_in_rectangle(msx,msy,_x,_y,_x+100,_y+_namehei){
        if mouse_wheel_up(){
            stid[? sl[| i]].Team++;NeedToUpdateTeamMap=true
        }
        if mouse_wheel_down(){
            stid[? sl[| i]].Team--;NeedToUpdateTeamMap=true
        }
    }
    draw_set_color(TeamColorOf(stid[? sl[| i]].Team))
    draw_rectangle(_x+50,_y,_x+100,_y+_namehei,false)
}
draw_set_font(ft_number)
/*var _map=global.NetworkObj.TeamMap
var _string=""
for(var k=ds_map_find_first(_map);!is_undefined(k);k=ds_map_find_next(_map,k)){
    _string+="{"
    _string+=string(k)+": "
    var _l=ds_list_create()
    ds_list_read(_l,_map[? k])
    for(var ii=0;ii&lt;ds_list_size(_l);ii++){
        _string+=string(_l[| ii])+" "
    }
    ds_list_destroy(_l)
    _string+="}"
}
draw_text(200,400,_string)*/

if NeedToUpdateTeamMap{
with(global.NetworkObj){
update_json_TeamMap()

var _str=json_encode(TeamMap)
if global.NetworkObj.object_index=obj_client{
    buffer=buffer_create(2048,buffer_fixed,1)
    buffer_write(buffer,buffer_s16,NETWORKPKT.UPDATETEAMS)
    buffer_write(buffer,buffer_string,_str)
    network_send_packet(client,buffer,buffer_tell(buffer))
    buffer_delete(buffer)
}
if global.NetworkObj.object_index=obj_server{
    svr_UpdateTeams(_str)
}
}
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Battlefield highlight
if global.IsGame{
if global.SelectedCard!=noone &amp;&amp; global.SelectedCard.CardType=1 &amp;&amp; global.SpellDat_SpellCastType[global.SelectedCard.CardID]=SpellCastType.BattlefieldTarget{
    draw_set_color(TeamColorOf(global.NetworkObj.socket_to_instanceid[? mysocket].Team))
    draw_set_alpha((sin(current_time/100)+1)/4)
    draw_rectangle(Homex-350,Homey-300,Homex+350,Homey+300,false)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
draw_set_halign(fa_middle)
draw_text(Homex,Homey,global.NetworkObj.socket_to_instanceid[? mysocket].name)
draw_set_halign(fa_left)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
