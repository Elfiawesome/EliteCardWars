<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init Game variables
scr_units_init()
cardList=ds_list_create()
Cardholderlist=ds_list_create()
Points=0
IsSpectating=false
CameraFocus=-1//still not sure about the camera?
CameraFocusNo=0
CardSelectorControl=noone
global.HoveredCard=noone
global.ShowHands=false
global.SelectedCard=noone
Homex=x
Homey=y


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Networking Vars
//network variables
mysocket=-1
IsLocal=false
//ping
Ping=0
HasPinged=true
//characteristics
name=""
Team=-1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(cardList)
//destroy all of my card holders
for(var i=0;i&lt;ds_list_size(Cardholderlist);i++){
    with(Cardholderlist[| i]){instance_destroy()}
}
ds_list_destroy(Cardholderlist)
//destroy hero
with(Hero){instance_destroy()}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Managing of Hand Cards
if IsLocal &amp;&amp; global.IsGame &amp;&amp; !IsSpectating &amp;&amp; CardSelectorControl=noone{
if keyboard_check_pressed(vk_enter){
    GameEvent_draw_specific_card(irandom_range(1,UnitID.UnitID_MAX-1))
    GameEvent_draw_specific_card(UnitID.PlantVsZombies_Imitator)
}
if global.SelectedCard=noone{
    if position_meeting(mouse_x,mouse_y,obj_card){
        var _card=instance_position(mouse_x,mouse_y,obj_card)
        global.HoveredCard=_card
        if mouse_check_button_pressed(mb_left){
            global.SelectedCard=_card
            global.HoveredCard=noone
        }
    }
}
if global.SelectedCard!=noone{
    if mouse_check_button_released(mb_left){
        //Placing card down
        if position_meeting(mouse_x,mouse_y,obj_cardholder){
            var _cardholder=instance_position(mouse_x,mouse_y,obj_cardholder)
            if mysocket=_cardholder.mysocket &amp;&amp; _cardholder.CardID=0{
            if global.GameStage=GAMESTAGE.PLAYERTURNS &amp;&amp; global.NetworkObj.Turnstage[global.NetworkObj.Turn]=mysocket{
            if Points&gt;=global.UnitDat_Pt[global.SelectedCard.CardID]{
                Points-=global.UnitDat_Pt[global.SelectedCard.CardID]
                with(global.NetworkObj){
                    if global.NetworkObj.object_index=obj_server{
                        svr_SummonCard(mysocket,_cardholder.Pos,global.SelectedCard.CardID)
                    }
                    if global.NetworkObj.object_index=obj_client{
                        buffer=buffer_create(1024,buffer_fixed,1)
                        buffer_write(buffer,buffer_s16,NETWORKPKT.SUMMONCARD)
                        buffer_write(buffer,buffer_s16,_cardholder.Pos)
                        buffer_write(buffer,buffer_s16,global.SelectedCard.CardID)
                        network_send_packet(client,buffer,buffer_tell(buffer))
                        buffer_delete(buffer)
                    }
                }
            instance_destroy(global.SelectedCard)
            ds_list_delete(cardList,ds_list_find_index(cardList,global.SelectedCard))
            }
            }
            }
        }
        global.SelectedCard=noone
    }
}
if global.SelectedCard=noone{
    if mouse_y&gt;(view_hview[0]*7/10+view_yview[0]){
        global.ShowHands=true
    }else{
        global.ShowHands=false
    }
}else{
    global.ShowHands=false
}

//camera movement
if global.NetworkObj.Turn!=-1{//during player's turn
    var amt=50
    if abs(view_xview[0]-mouse_x)&lt;100{view_xview[0]-=amt}
    if abs((view_xview[0]+view_wview[0])-mouse_x)&lt;100{view_xview[0]+=amt}
    if abs(view_yview[0]-mouse_y)&lt;100{view_yview[0]-=amt}
    if abs((view_yview[0]+view_hview[0])-mouse_y)&lt;200{view_yview[0]+=amt}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pressing Q to start game
if IsLocal &amp;&amp; !global.IsGame{

if keyboard_check_pressed(ord("Q")){
    //only if server
    if global.NetworkObj.object_index=obj_server{
        with(global.NetworkObj){
            //setting up Team Map
            update_json_TeamMap()
            //create card holders
            create_AllCardHolders(TeamMap)
            //set up turnstage
            update_Turnstage(TeamMap)
            //send server an example packet
            for(var i=0;i&lt;ds_list_size(socketlist);i++){
                buffer=buffer_create(1024,buffer_fixed,1)
                buffer_write(buffer,buffer_s16,NETWORKPKT.STARTGAME)
                buffer_write(buffer,buffer_string,json_encode(TeamMap))
                network_send_packet(socketlist[| i],buffer,buffer_tell(buffer))
                buffer_delete(buffer)
            }
            //reimburse points
            GameEvent_Con_ReimbursePoints()
            //set the game to ready
            global.IsGame=true
        }
    }
}

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Your Turn
if IsLocal &amp;&amp; global.IsGame &amp;&amp; !IsSpectating{
//Camera Position
player_con_CameraPosition()

//Pressing "A" on a Cardholders
player_con_AbilitySelection()

//Card Selector
player_con_CardSelectorControl()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Attacking Phase
if IsSpectating{exit;}
if global.IsGame{
    if IsLocal &amp;&amp; global.GameStage=GAMESTAGE.ATTACKINGTURN &amp;&amp; global.NetworkObj.Turnstage[global.NetworkObj.Turn]=mysocket{
        //selecting cardholders
        if mouse_check_button_pressed(mb_left){
            if position_meeting(mouse_x,mouse_y,obj_cardholder){
                var _cardholder=instance_position(mouse_x,mouse_y,obj_cardholder)
                if ds_list_find_index(global.NetworkObj.SelectedCardHolders_Ability,_cardholder)!=-1{exit;}
                //Selecting MY unit
                if _cardholder.CardID!=0{
                if _cardholder.mysocket=mysocket &amp;&amp; _cardholder.Stats[? "AtkAlrdy"]=false{
                    if ds_list_find_index(Cardholderlist,_cardholder)!=-1{
                    if ds_list_find_index(global.NetworkObj.SelectedCardHolders,_cardholder)=-1{
                        ds_list_add(global.NetworkObj.SelectedCardHolders,_cardholder)
                        _cardholder.IsSelected=true
                    }else{
                        ds_list_delete(global.NetworkObj.SelectedCardHolders,ds_list_find_index(global.NetworkObj.SelectedCardHolders,_cardholder))
                        _cardholder.IsSelected=false
                    }
                    }
                }
                //attacking Enemy unit
                if _cardholder.mysocket!=mysocket &amp;&amp; _cardholder.Stats[? "Hp"]&gt;0 &amp;&amp; !ds_list_empty(global.NetworkObj.SelectedCardHolders) &amp;&amp; global.NetworkObj.socket_to_instanceid[? _cardholder.mysocket].Team!=Team{
                    //Setting all Attacking data into a json called 'DatMap'
                    var DatMap=ds_map_create()
                    //writing All Attacking Units
                    var AttackingList=ds_list_create()
                    var AttackingObjects=ds_list_create()
                    for(var i=0;i&lt;ds_list_size(global.NetworkObj.SelectedCardHolders);i++){
                        var _o=global.NetworkObj.SelectedCardHolders[| i];
                        if !scr_ValidAttackSpot(_o,_cardholder){continue;}
                        var _map=ds_map_create();
                        _map[? "Id"]=_o.CardID
                        _map[? "Pos"]=_o.Pos
                        _map[? "Socket"]=_o.mysocket
                        ds_list_add(AttackingList,json_encode_destroy(_map))
                        ds_list_add(AttackingObjects,_o)
                    }
                    
                    var AttackingListString=ds_list_write(AttackingList);
                    ds_list_destroy(AttackingList)
                    DatMap[? "AttackingList"]=AttackingListString
                    //writing the one Victim Unit
                    var _map=ds_map_create();
                    _map[? "Id"]=_cardholder.CardID
                    _map[? "Pos"]=_cardholder.Pos
                    _map[? "Socket"]=_cardholder.mysocket
                    ds_map_add_map(DatMap,"Victim",_map)
                    //wrapping up the DatMapString
                    var DatMapString=json_encode_destroy(DatMap)
                    
                    if global.NetworkObj.object_index=obj_client{
                        with(global.NetworkObj){
                            buffer=buffer_create(2048,buffer_fixed,1)
                            buffer_write(buffer,buffer_s16,NETWORKPKT.ATTACKCARDHOLDER)
                            buffer_write(buffer,buffer_string,DatMapString)
                            network_send_packet(client,buffer,buffer_tell(buffer))
                            buffer_delete(buffer)
                        }
                        with(global.NetworkObj){AttackCardHolder(DatMapString)}
                    }
                    if global.NetworkObj.object_index=obj_server{
                        with(global.NetworkObj){
                            svr_AttackCardHolder(DatMapString,0)
                        }
                    }
                    

                    //Making cardholders not selected
                    for(var i=0;i&lt;ds_list_size(AttackingObjects);i++){
                        with(AttackingObjects[| i]){
                            IsSelected=false
                        }
                        ds_list_delete(global.NetworkObj.SelectedCardHolders,ds_list_find_index(global.NetworkObj.SelectedCardHolders,AttackingObjects[| i]))
                    }
                    ds_list_destroy(AttackingObjects)
                }
                }
            }
            if position_meeting(mouse_x,mouse_y,obj_heroholder){
                var _cardholder=instance_position(mouse_x,mouse_y,obj_heroholder)
                //Attacking Hero
                if _cardholder.mysocket!=mysocket &amp;&amp; !ds_list_empty(global.NetworkObj.SelectedCardHolders) &amp;&amp; global.NetworkObj.socket_to_instanceid[? _cardholder.mysocket].Team!=Team{
                    //if battlefield empty
                    if scr_ConBattlefieldSize(global.NetworkObj.socket_to_instanceid[? _cardholder.mysocket])&lt;1{
                        //Setting all Attacking data into a json
                        var DatMap=ds_map_create()
                        var AttackingList=ds_list_create()
                        for(var i=0;i&lt;ds_list_size(global.NetworkObj.SelectedCardHolders);i++){
                            var _o=global.NetworkObj.SelectedCardHolders[| i];
                            var _map=ds_map_create();
                            _map[? "Id"]=_o.CardID
                            _map[? "Pos"]=_o.Pos
                            _map[? "Socket"]=_o.mysocket
                            ds_list_add(AttackingList,json_encode_destroy(_map))
                        }
                        var AttackingListString=ds_list_write(AttackingList);
                        ds_list_destroy(AttackingList)
                        DatMap[? "AttackingList"]=AttackingListString
                        
                        //setting up victim data
                        var _map=ds_map_create();
                        _map[? "Id"]=_cardholder.CardID
                        _map[? "Socket"]=_cardholder.mysocket
                        ds_map_add_map(DatMap,"Victim",_map)
                        //wrapping up the DatMapString
                        var DatMapString=json_encode_destroy(DatMap)
                        
                        //Sending to server
                        if global.NetworkObj.object_index=obj_client{
                            with(global.NetworkObj){
                                buffer=buffer_create(2048,buffer_fixed,1)
                                buffer_write(buffer,buffer_s16,NETWORKPKT.ATTACKHERO)
                                buffer_write(buffer,buffer_string,DatMapString)
                                network_send_packet(client,buffer,buffer_tell(buffer))
                                buffer_delete(buffer)
                            }
                        }
                        if global.NetworkObj.object_index=obj_server{
                            with(global.NetworkObj){
                                svr_AttackHero(DatMapString)
                            }
                        }
                        
                        //Making cardholders not selected
                        for(var i=0;i&lt;ds_list_size(global.NetworkObj.SelectedCardHolders);i++){
                            with(global.NetworkObj.SelectedCardHolders[| i]){
                                IsSelected=false
                            }
                        }
                        ds_list_clear(global.NetworkObj.SelectedCardHolders)
                        
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw event
if IsLocal &amp;&amp; !global.IsGame{
var sl=global.NetworkObj.socketlist
var stid=global.NetworkObj.socket_to_instanceid

with(global.NetworkObj){update_json_TeamMap()}
var _map=global.NetworkObj.TeamMap
var ii=0
for(var k=ds_map_find_first(_map);!is_undefined(k);k=ds_map_find_next(_map,k)){
    var v=_map[? k];
    var _l=ds_list_create();
    ds_list_read(_l,v)
    for(var i=0;i&lt;ds_list_size(_l);i++){
        draw_text(100+ii*200,100+i*30,stid[? real(_l[| i])].name)
    }
    ds_list_destroy(_l)
    ii++
}

}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
