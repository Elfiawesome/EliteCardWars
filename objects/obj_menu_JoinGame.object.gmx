<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init broadcasts
ServerIpList=ds_list_create()
ServerPortList=ds_list_create()
ServerDetailsList=ds_list_create()
BroadcastServer=network_create_server(network_socket_udp,3114,100);
BroadcastDestroyed=false

IsJoinGameButton=false
SelectedServer=-1
ClientObj=-1

//transitions
TransitionCase=0
RmTransition=-1

clickdelay=0

//visual
SelectServerHighlight=0
ButtonOverlay[0,0]=0
ButtonOverlay[1,0]=0
ButtonOverlay[2,0]=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BroadcastDestroyed=false{
    network_destroy(BroadcastServer)
}
ds_list_destroy(ServerIpList)
ds_list_destroy(ServerPortList)
ds_list_destroy(ServerDetailsList)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Transition when finsihed
if RmTransition!=-1 &amp;&amp; RmTransition.MovedRoom{
    switch(TransitionCase){
        case 0://Exit selected
            room_goto(rm_menu)
        break;
    }
}

//join server
if IsJoinGameButton &amp;&amp; SelectedServer!=-1{
    //set target
    var _ip=ServerIpList[| SelectedServer]
    var _port=ServerPortList[| SelectedServer]
    global.TargetNetworkPort=_port
    global.TargetNetworkIP=_ip
    //destroy current server
    network_destroy(BroadcastServer)
    BroadcastDestroyed=true
    //attempt to connect
    ClientObj=instance_create(0,0,obj_client);
}
if keyboard_check_pressed(ord("C")){
    global.TargetNetworkIP=get_string("IP","127.0.0.1")
    global.TargetNetworkPort=real(get_string("Port No.","3115"))
    //destroy current server
    network_destroy(BroadcastServer)
    BroadcastDestroyed=true
    //attempt to connect
    ClientObj=instance_create(0,0,obj_client);
}
//finsihed connection
if ClientObj!=-1{
    if ClientObj.client&gt;=0{//connection succesful
        instance_destroy()
    }
    if ClientObj.client&lt;0{//connection failed
        instance_destroy(ClientObj)
        ClientObj=-1
        
        //recreate the network again
        BroadcastDestroyed=false
        BroadcastServer=network_create_server(network_socket_udp,3114,100);
    }
}

clickdelay--
//reset buttons
IsJoinGameButton=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive Packets
var eventid=async_load[? "id"];
if !BroadcastDestroyed{
    var ipaddress = async_load[? "ip"];
    var buffer = async_load[? "buffer"]
    buffer_seek(buffer,buffer_seek_start,0)
    var ServerPort=buffer_read(buffer,buffer_s32);
    var Serverinfo=buffer_read(buffer,buffer_string);
    
    if ds_list_find_index(ServerIpList,ipaddress)=-1 || ds_list_find_index(ServerPortList,ServerPort)=-1{
        ds_list_add(ServerIpList,ipaddress)
        ds_list_add(ServerPortList,ServerPort)
        var _m=json_decode(Serverinfo)
        ds_list_add(ServerDetailsList,_m)
        ds_list_mark_as_map(ServerDetailsList,ds_list_size(ServerDetailsList)-1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy self when switch rooms
if RmTransition!=-1{
    instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($CECED0)
draw_rectangle(0,0,view_wport[0],view_hport[0],false)

var msx=device_mouse_x_to_gui(0)
var msy=device_mouse_y_to_gui(0)

//draw infobox
draw_set_color($ABABAF)
var ibx=105*1.5
var iby=54*1.5
var ibw=346*1.5
var ibh=612*1.5
var ibj=80*1.5
draw_rectangle(ibx,iby,ibx+ibw,iby+ibh,false)
if SelectedServer!=-1{
    //Draw Join Game box
    draw_set_color($818187)
    draw_rectangle(ibx,iby+ibh-ibj,ibx+ibw,iby+ibh,false)
    if ButtonOverlay[2,0]&gt;0.01{
        draw_set_color($E7C7B4)draw_rectangle(ibx,iby+ibh-ibj*ButtonOverlay[2,0],ibx+ibw,iby+ibh,false)
    }
    draw_set_valign(fa_middle)
    draw_set_halign(fa_center)
    draw_set_color(c_black)
    draw_set_font(ft_Ebrima_Standard)
    draw_text(ibx+ibw/2,iby+ibh-ibj/2,"Join Game")
    if point_in_rectangle(msx,msy,ibx,iby+ibh-ibj,ibx+ibw,iby+ibh){
        ButtonOverlay[2,0]=lerp(ButtonOverlay[2,0],1,0.2)
        if mouse_check_button_pressed(mb_left){
            IsJoinGameButton=true
        }
    }else{
        ButtonOverlay[2,0]=lerp(ButtonOverlay[2,0],0,0.2)
    }
    
    draw_set_valign(fa_top)
    draw_set_halign(fa_center)
    draw_set_font(ft_Ebrima_Standard_Bold)
    draw_text_transformed(ibx+ibw/2,iby,"Game Info",1,1,0)
}
//headerbox
var hbx=466*1.5
var hby=54*1.5
var hbw=709*1.5
var hbh=54*1.5
draw_set_color($818187)
draw_rectangle(hbx,hby,hbx+hbw,hby+hbh,false)
var namepos=0.03
var mappos=0.55
var typepos=0.7
var plyrpos=0.85
draw_set_color(c_black)
draw_set_valign(fa_middle)
draw_set_halign(fa_left)
draw_set_font(ft_Ebrima_Standard_Bold)
draw_text(hbx+hbw*namepos,hby+hbh/2,"Server")
draw_text(hbx+hbw*mappos,hby+hbh/2,"Map")
draw_text(hbx+hbw*typepos,hby+hbh/2,"Type")
draw_text(hbx+hbw*plyrpos,hby+hbh/2,"Players")

var _sep=8*1.5
var sbh=35*1.5
draw_set_font(ft_Ebrima_Standard)
for(i=0;i&lt;ds_list_size(ServerIpList);i++){
    var _x=hbx
    var _y=hby+hbh+_sep + i*(_sep+sbh)
    
    //set color
    draw_set_color($BCBCC0)
    //draw box
    draw_rectangle(_x,_y,_x+hbw,_y+sbh,false)//back box
    if SelectedServer=i{//highlight box
        draw_set_color($E5DCD6);
        draw_rectangle(ibx+ibw,_y,_x+hbw*SelectServerHighlight,_y+sbh,false)
    }
    draw_set_color(c_black)
    var _ip=ServerIpList[| i]
    var _port=ServerPortList[| i]
    var _infomap=ServerDetailsList[| i]
    var _totalPlayers=_infomap[? "TotalPlayers"]
    draw_text_transformed(_x+hbw*namepos,_y+sbh/2,_infomap[? "ServerName"],1,1,0)
    draw_text_transformed(_x+hbw*mappos,_y+sbh/2,"Classic",1,1,0)
    draw_text_transformed(_x+hbw*typepos,_y+sbh/2,"Classic",1,1,0)
    draw_text_transformed(_x+hbw*plyrpos,_y+sbh/2,string(_totalPlayers),1,1,0)
    
    //selected
    if point_in_rectangle(msx,msy,_x,_y,_x+hbw,_y+sbh){
        if mouse_check_button_pressed(mb_left){
            if SelectedServer!=i{
                SelectedServer=i
                SelectServerHighlight=0
                clickdelay=20
            }else{
                if clickdelay&gt;0{
                    IsJoinGameButton=true
                }else{
                    SelectedServer=-1
                }
            }
        }
    }
}
//broadcast server error
if BroadcastServer&lt;0{
    var _x=hbx
    var _y=hby+hbh+_sep + 0*(_sep+sbh)
    draw_set_color($BCBCC0)
    draw_rectangle(_x,_y,_x+hbw,_y+sbh,false)
    draw_set_color(c_black)
    draw_set_font(ft_Ebrima_Standard_Bold)
    draw_text_transformed(_x+hbw*namepos,_y+sbh/2,"Broadcast Server is Not Working :&lt;",1,1,0)
}
//highlight
SelectServerHighlight=lerp(SelectServerHighlight,1,0.1)

//draw refresh box
var rbx=hbx
var rby=iby+ibh-ibj
var rbw=hbw-200
var rbh=ibj
draw_set_color($818187)
draw_set_font(ft_Ebrima_Standard)
draw_rectangle(rbx,rby,rbx+rbw,rby+rbh,false)
if ButtonOverlay[0,0]&gt;0.01{
    draw_set_color($ABABAF);draw_rectangle(rbx,rby+rbh-rbh*ButtonOverlay[0,0],rbx+rbw,rby+rbh,false)
}
draw_set_valign(fa_middle)
draw_set_halign(fa_center)
draw_set_color(c_black)
draw_text(rbx+rbw/2,rby+rbh/2,"Refresh Servers")
if point_in_rectangle(msx,msy,rbx,rby,rbx+rbw,rby+rbh){
    ButtonOverlay[0,0]=lerp(ButtonOverlay[0,0],1,0.2)
    if mouse_check_button_pressed(mb_left){
        ds_list_clear(ServerIpList)
        ds_list_clear(ServerPortList)
        ds_list_clear(ServerDetailsList)
        SelectedServer=-1
    }
}else{
    ButtonOverlay[0,0]=lerp(ButtonOverlay[0,0],0,0.2)
}

//exit button
var ebx=rbx+rbw+15
var eby=iby+ibh-ibj
var ebw=hbx+hbw-ebx
var ebh=ibj
draw_set_color($818187)
draw_rectangle(ebx,eby,ebx+ebw,eby+ebh,false)
if ButtonOverlay[1,0]&gt;0.01{
    draw_set_color($ABABAF);draw_rectangle(ebx,eby+ebh-ebh*ButtonOverlay[1,0],ebx+ebw,eby+ebh,false)
}
draw_set_color(c_black)
draw_text(ebx+ebw/2,eby+ebh/2,"Exit")
if point_in_rectangle(msx,msy,ebx,eby,ebx+ebw,eby+ebh){
    ButtonOverlay[1,0]=lerp(ButtonOverlay[1,0],1,0.2)
    if mouse_check_button_pressed(mb_left){
        RmTransition=instance_create(0,0,obj_room_transition)
        TransitionCase=0
    }
}else{
    ButtonOverlay[1,0]=lerp(ButtonOverlay[1,0],0,0.2)
}


//reset aligns
draw_set_valign(fa_top)
draw_set_halign(fa_left)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
